// Generated by CoffeeScript 1.8.0
(function() {
  var argv, bna, ddir, dofuse, dstfile, fpath, fs, isDir, mfile, optimist, path, resolver, _;

  optimist = require('optimist').usage('Build modules and dependencies for app in current dir.\nUsage: -b -p -c -f file -o out/').boolean(['b', 'p', 'c', 'q', 'w']).alias('b', 'build').alias('p', 'packagejson').alias('c', 'copy').alias('f', 'fuse').alias('q', 'quiet').string("fuselib").string('f').string("o").describe('b', 'build app, same as -p -c together').describe('p', 'write module dependencies to package.json').describe('c', 'copy depended external modules to local node_modules dir').describe('f', 'generate a single executable js file, see doc.').describe('fuselib', 'fuse to a library to export modules, see doc.').describe("o", 'specify output file or dir for fuse. Optional, default is ./').describe("q", 'quite mode. No warnings').describe('w', 'watch file: fuse on change');

  argv = optimist.argv;

  bna = require("../lib/bna");

  fs = require("fs");

  path = require("path");

  _ = require("under_score");

  if (!(argv.b || argv.p || argv.c || argv.f || argv.fuselib)) {
    console.log(optimist.help());
    if (fs.existsSync(path.join(process.cwd(), "package.json"))) {
      bna.dir.npmDependencies(process.cwd(), function(err, deps) {
        if (err) {
          console.log(err);
        } else {
          console.log("Module dependencies are:");
          console.log(deps);
        }
        return bna.dir.externDependModules(process.cwd(), function(err, deps) {
          if (err) {
            return console.log(err);
          } else {
            console.log("Extern modules (node_modules located outside of current dir):");
            return console.log(deps.slice(1));
          }
        });
      });
    }
  }

  if (argv.quiet) {
    bna.quiet = true;
  }

  if (argv.p) {
    bna.writePackageJson(process.cwd(), function(err, removedPackages) {
      if (err) {
        return console.log(err.stack);
      } else {
        if (removedPackages.length) {
          console.log("Removd unused packages: " + removedPackages);
        }
        return console.log("package.json dependencies updated");
      }
    });
  } else if (argv.c) {
    bna.copyExternDependModules(process.cwd(), function(msg) {
      return console.log(msg);
    }, function(err) {
      if (err) {
        return console.log(err.stack);
      } else {
        return console.log("copying finished");
      }
    });
  } else if (argv.b) {
    bna.writePackageJson(process.cwd(), function(err, removedPackages) {
      if (err) {
        return console.log(err.stack);
      } else {
        if (removedPackages.length) {
          return console.log("Removd unused packages: " + removedPackages);
        } else {
          console.log("package.json dependencies updated");
          return bna.copyExternDependModules(process.cwd(), function(msg) {
            return console.log(msg);
          }, function(err) {
            if (err) {
              return console.log(err.stack);
            } else {
              return console.log("copying finished");
            }
          });
        }
      }
    });
  } else if (argv.f || argv.fuselib) {
    resolver = require("resolve");
    ddir = ".";
    if (argv.f === true || argv.fuselib === true) {
      fpath = path.resolve(".");
    } else {
      fpath = path.resolve(argv.f || argv.fuselib);
    }
    if (fs.statSync(fpath).isDirectory()) {
      mfile = bna.mainFile(fpath);
      if ((argv.fuselib != null) && !mfile) {

      } else {
        fpath = mfile;
      }
    }
    if (!fpath) {
      console.log("Nothing to fuse, are you in a module folder?  See help below\n");
      console.log(optimist.help());
      process.exit(1);
    }
    console.log("Fusing file " + (path.relative('.', fpath)));
    if (argv.o) {
      dstfile = null;
      ddir = path.resolve(argv.o);
      if (path.extname(ddir).toLowerCase() === ".js") {
        dstfile = path.basename(ddir);
        ddir = path.dirname(ddir);
      }
    }
    isDir = fs.statSync(fpath).isDirectory();
    dofuse = (function(_this) {
      return function(cb) {
        if (isDir) {
          return bna.fuseDirTo(fpath, ddir, {
            verbose: true,
            aslib: argv.fuselib != null,
            dstfile: dstfile
          }, cb);
        } else {
          return process.nextTick(function() {
            var units;
            units = bna.fuseTo(fpath, ddir, {
              verbose: true,
              aslib: argv.fuselib != null,
              dstfile: dstfile
            });
            if (cb) {
              return cb(units);
            }
          });
        }
      };
    })(this);
    if (argv.w) {
      (function(_this) {
        return (function() {
          var onChange, watch;
          onChange = (function() {
            var doChange;
            doChange = _.throttle(function() {
              return dofuse(function(units) {
                return watch(units);
              });
            }, 5000, {
              leading: false
            });
            return function(e, fp) {
              console.log("" + (path.relative('.', fp)) + " changed");
              return doChange();
            };
          })();
          watch = (function() {
            var watchers;
            watchers = {};
            return function(units) {
              var fp, newWatchers, unit, watcher, _i, _len;
              newWatchers = {};
              for (_i = 0, _len = units.length; _i < _len; _i++) {
                unit = units[_i];
                if (unit.fpath in watchers) {
                  newWatchers[unit.fpath] = watchers[unit.fpath];
                  delete watchers[unit.fpath];
                } else {
                  (function(unit) {
                    console.log("Being watching " + (path.relative('.', unit.fpath)));
                    return newWatchers[unit.fpath] = fs.watch(unit.fpath, function(e) {
                      return onChange(e, unit.fpath);
                    });
                  })(unit);
                }
              }
              for (fp in watchers) {
                watcher = watchers[fp];
                console.log("Stop watching  " + (path.relative('.', fp)));
                watcher.close();
              }
              return watchers = newWatchers;
            };
          })();
          return dofuse(function(units) {
            return watch(units, onChange);
          });
        });
      })(this)();
    } else {
      dofuse();
    }
  }

}).call(this);

//# sourceMappingURL=bna.js.map
